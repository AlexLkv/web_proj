import sqlite3
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import emoji
from flask_login import login_user
import db_session
import main
from news import News

TOKEN = '5330961932:AAE4raRPL_4YWvhoszimBDRL8dODuL6K6FE'

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['help'])
async def help(msg: types.Message):
    await bot.send_message(msg.from_user.id,
                           f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –Ø –±–æ—Ç —Å–∞–π—Ç–∞ "-Requiem-"\n\n'
                           f'{emoji.emojize("üüß")} –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏,'
                           f'–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/show_news [–∫–æ–ª-–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π]"\n\n'
                           f'{emoji.emojize("üü™")}–ß—Ç–æ–±—ã –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å, –≤–≤–µ–¥–∏—Ç–µ "/add_news", –Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –±—ã—Ç—å '
                           f'–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.\n'
                           f'–í–≤–µ–¥–∏—Ç–µ –≤—Å—ë –ø–æ –ø—Ä–∏–º–µ—Ä—É, –ø–æ–¥—Å—Ç–∞–≤–ª—è—è —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ: "/add_news [email]&&[password]&&[title_news]&&'
                           f'[content]"\n\n'
                           f'{emoji.emojize("üü¶")}–ï—Å–ª–∏ –≤—ã –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É '
                           f'"/register" \n–í–≤–µ–¥–∏—Ç–µ –≤—Å—ë –ø–æ –ø—Ä–∏–º–µ—Ä—É, –ø–æ–¥—Å—Ç–∞–≤–ª—è—è —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ: "/register [our name]&&[our email]&&[password]'
                           f'&&[answer our password]"')


@dp.message_handler(commands=['show_news'])
async def show_news(msg: types.Message):
    try:
        n = int(msg.text[11:])
        con = sqlite3.connect("app2/db/blogs.db", check_same_thread=False)
        cur = con.cursor()
        news = cur.execute(
            f"SELECT (SELECT name FROM users WHERE id = user_id), "
            f"created_date, title, content, img FROM news ORDER BY id DESC LIMIT {n}").fetchall()
        con.close()
        for new in news:
            await bot.send_message(msg.from_user.id, f"{emoji.emojize('‚úÖ')}{emoji.emojize('‚úÖ')}"
                                                     f"{emoji.emojize('‚úÖ')}{emoji.emojize('‚úÖ')}\n"
                                                     f"{emoji.emojize('üß∏')}–ê–≤—Ç–æ—Ä –∑–∞–ø–∏—Å–∏ - {new[0]}\n"
                                                     f"{emoji.emojize('üìÜ')}–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è - {new[1]}\n"
                                                     f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ - {new[2]}\n"
                                                     f"–ö–æ–Ω—Ç–µ–∫—Å—Ç - {new[3]}")
            if new[4]:
                photo = open(f'app2/static/img/{new[4]}', 'rb')
                await bot.send_photo(msg.from_user.id, photo)
    except TypeError:
        await bot.send_message(msg.from_user.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")


@dp.message_handler(commands=['add_news'])
async def add_news(msg: types.Message):
    text = msg.text[11:-1].split(']&&[')
    if len(text) == 4:
        db_sess = db_session.create_session()
        from app2.users import User
        user = db_sess.query(User).filter(User.email == text[0]).first()
        if user and user.check_password(text[0]):
            main.load_user(user.id)
            news = News()
            news.title = text[2]
            news.content = text[3]
            news.is_private = False
            user.news.append(news)
            db_sess.merge(user)
            db_sess.commit()


@dp.message_handler(commands=['register'])
async def register(msg: types.Message):
    n = int(msg.text[11:])
    con = sqlite3.connect("app2/db/blogs.db", check_same_thread=False)
    cur = con.cursor()
    news = cur.execute(
        f"SELECT (SELECT name FROM users WHERE id = user_id), "
        f"created_date, title, content, img FROM news ORDER BY id DESC LIMIT {n}").fetchall()
    con.close()


@dp.message_handler(content_types=['text'])
async def main(msg: types.Message):
    await bot.send_message(msg.from_user.id, "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É, —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ")


if __name__ == '__main__':
    executor.start_polling(dp)
